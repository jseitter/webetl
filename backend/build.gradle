plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'application'
    id 'distribution'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Deaktiviert den Standard-Jar-Task, sodass nur das BootJar erstellt wird
tasks.jar {
    enabled = false
}

// Define a separate configuration for compiler-only dependencies
configurations {
    compilerOnly
    webetlRuntimeOnly
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework:spring-messaging:6.1.3'
    implementation 'org.springframework:spring-websocket:6.1.3'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.apache.commons:commons-compress:1.24.0'
    
    // Compiler-only dependencies
    compilerOnly 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    compilerOnly 'org.slf4j:slf4j-api:2.0.7'
    compilerOnly 'org.slf4j:slf4j-simple:2.0.7'
    implementation 'com.palantir.javapoet:javapoet:0.6.0'
    
    webetlRuntimeOnly 'org.postgresql:postgresql:42.7.4'
    webetlRuntimeOnly 'mysql:mysql-connector-java:8.0.33'
    webetlRuntimeOnly 'com.h2database:h2:2.3.232'
    webetlRuntimeOnly 'org.slf4j:slf4j-api:2.0.9'
    webetlRuntimeOnly 'ch.qos.logback:logback-classic:1.4.11'  // Logback implementation
    webetlRuntimeOnly 'ch.qos.logback:logback-core:1.4.11'

    // Official OpenAI client
    implementation 'com.openai:openai-java:0.26.1'
    // JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Rate limiting (optional, but recommended for AI API calls)
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
}

test {
    useJUnitPlatform()
}

application {
    mainClass = 'io.webetl.Application'
}
// create a jar file for the flow compiler
task compilerJar(type: Jar) {
    archiveBaseName = 'flow-compiler'
    archiveClassifier = ''
    
    manifest {
        attributes 'Main-Class': 'io.webetl.compiler.FlowCompilerCLI'
    }
    
    from sourceSets.main.output
    
    dependsOn configurations.compilerOnly
    from {
        configurations.compilerOnly.collect { zipTree(it) }
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// create a jar file for the runtime
task runtimeJar(type: Jar) {
    archiveBaseName = 'webetl-runtime'
    archiveVersion = ''
    archiveClassifier = ''
    
    manifest {
        attributes 'Main-Class': 'io.webetl.runtime.JarLauncher'
    }
    
    from sourceSets.main.output
    
    // Include all the runtime classes needed by the flow system
    include 'io/webetl/components/**'
    include 'io/webetl/runtime/**'
    include 'io/webetl/model/**'  // Include ALL model classes and subpackages
    include 'io/webetl/compiler/CompiledFlow.class'
    include 'java/util/Queue.class'
    include 'java/util/concurrent/**'
    include 'org/slf4j/**'
    include 'ch/qos/logback/**'
    
    dependsOn configurations.webetlRuntimeOnly
    from {
        configurations.webetlRuntimeOnly.collect { zipTree(it) }
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// create a jar file for the backend
bootJar {
    archiveFileName = 'backend.jar'
}

// create a distribution for the backend
distributions {
    boot {
        distributionBaseName = 'webetl'
        contents {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            from(compilerJar) {
                into "lib"
                rename { "compiler.jar" }
            }
            from(runtimeJar) {
                into "lib"
                rename { "runtime.jar" }
            }
            from('src/dist/bin') {
                into "bin"
                fileMode = 0755
                include 'start.sh'
                include 'start.bat'
                include 'compile.sh'
                include 'compile.bat'
                include 'stop.sh'
                include 'stop.bat'
                include 'status.sh'
                include 'status.bat'
            }
        }
    }
}

task createRelease(type: Zip) {
    dependsOn bootDistZip
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(zipTree(bootDistZip.archiveFile)) {
        eachFile { fcd ->
            def segments = fcd.relativePath.segments
            if (segments[0] =~ /webetl.*/) {
                segments = segments.drop(1)
            }
            fcd.relativePath = new RelativePath(true, segments)
        }
        includeEmptyDirs = false
    }
    
    // Add the template file to the cfg directory
    from('src/main/resources') {
        include 'application-secrets.properties.template'
        include 'README-config.md'
        into 'cfg'
        rename 'README-config.md', 'README.md'
    }
    
    destinationDirectory = file("$buildDir/release")
    archiveFileName = "webetl-${version}.zip"
    fileMode = 0755
}

tasks.bootDistZip.dependsOn(':frontend:build')

task extractRelease {
    dependsOn clean, createRelease
    
    doLast {
        // Recreate test directory
        def testDir = file("${buildDir}/test")
        if (testDir.exists()) {
            testDir.deleteDir()
        }
        testDir.mkdirs()
        
        // Extract release
        copy {
            from zipTree("${buildDir}/release/webetl-${version}.zip")
            into testDir
        }
        
        // Make shell script executable on Unix-like systems
        def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
        if (!isWindows) {
            exec {
                commandLine 'chmod', '+x', "${buildDir}/test/bin/start.sh"
                commandLine 'chmod', '+x', "${buildDir}/test/bin/stop.sh"
            }
        }
    }
}

task testRelease(type: JavaExec) {
    dependsOn extractRelease
    
    classpath = files("${buildDir}/test/lib/backend.jar")
    mainClass = 'io.webetl.Application'
    
    args = ["--data.dir=${System.getProperty('user.home')}/.webetl"]
    
    doFirst {
        // Open browser after a short delay
        Thread.start {
            Thread.sleep(2000)
            def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
            if (isWindows) {
                ['cmd', '/c', 'start', 'http://localhost:8085'].execute()
            } else {
                ['sh', '-c', 'open http://localhost:8085 || xdg-open http://localhost:8085'].execute()
            }
        }
    }
}

task verifyJarContents(type: Exec) {
    dependsOn bootJar
    doFirst {
        def jarFile = tasks.bootJar.archiveFile.get().asFile
        println "Verifying contents of ${jarFile}"
        commandLine 'jar', 'tf', jarFile
    }
}

createRelease.dependsOn verifyJarContents

bootJar {
    dependsOn ':frontend:build'
    doFirst {
        // Ensure frontend is built and files exist
        def distDir = project(':frontend').projectDir.toPath().resolve('dist').toFile()
        if (!distDir.exists()) {
            throw new GradleException("Frontend files not found in ${distDir}. Make sure frontend build succeeded.")
        }
        println "Found frontend files in: ${distDir.absolutePath}"
    }

    from("${project(':frontend').projectDir}/dist") {
        into 'BOOT-INF/classes/static'
        eachFile { file ->
            println "Including frontend file: ${file.path}"
        }
    }
    
    // Exclude the actual secrets file from the JAR
    exclude 'BOOT-INF/classes/application-secrets.properties'
}

// Make sure bootJar runs after frontend:build
bootJar.mustRunAfter(':frontend:build')

// Modify the processResources task to exclude application-secrets.properties
processResources {
    exclude 'application-secrets.properties'
}
